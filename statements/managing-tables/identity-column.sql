/*
PostgreSQL version 10 introduced a new constraint GENERATED AS IDENTITY that allows you to automatically assign a unique number to a column.

The GENERATED AS IDENTITY constraint is the SQL standard-conforming variant of the good old SERIAL column.
*/

-- GENERATED ALWAYS example
drop table if exists color;

create table color (
  color_id int generated always as identity,
  color_name varchar not null
);

insert into color (color_name)
values ('Red');

select * from color;

/*
insert into color(color_id, color_name)
values (2, 'Green'); -- will throw error
*/

-- to fix the error, use OVERRIDING SYSTEM VALUE
insert into color (color_id, color_name)
overriding system value
values (2, 'Green');

-- or use GENERATED BY DEFAULT AS IDENTITY instead.

-- GENERATED BY DEFAULT AS IDENTITY example
drop table color;

create table color (
  color_id int generated by default as identity,
  color_name varchar not null
);

insert into color (color_name)
values ('White'); -- It works as expected.

-- Unlike the previous example that uses the GENERATED ALWAYS AS IDENTITY constraint, the statement above works perfectly fine.
insert into color (color_id, color_name)
values (2, 'Yellow');

-- Sequence options example
drop table color;

create table color (
  color_id int generated by default as identity
  (start with 10 increment by 10),
  color_name varchar not null
);

insert into color (color_name)
values 
  ('Orange'),
  ('Purple');

select * from color;

-- Adding an identity column to an existing table

create table shape (
  shape_id int not null,
  shape_name varchar not null
);

alter table shape
alter column shape_id add generated always as identity;

-- Changing an identity column

alter table shape
alter column shape_id set generated by default;

-- Removing the GENERATED AS IDENTITY constraint

alter table shape
alter column shape_id
drop identity if exists;

drop table if exists shape;

